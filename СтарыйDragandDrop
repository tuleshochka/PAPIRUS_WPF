  private void CircuitCanvas_MouseMove(object sender, MouseEventArgs e)
  {
        if (Math.Abs(e.GetPosition(CircuitCanvas).X - _anchorPoint.X) > 3 ||
                    Math.Abs(e.GetPosition(CircuitCanvas).Y - _anchorPoint.Y) > 3)
                {
                    _attachedInputLines = Object.GetInputLine();
                    DragDrop.DoDragDrop(CircuitCanvas, Object,DragDropEffects.All);
                    inDrag=false;
                }
 }


             else
            {
                String[] allFormats = e.Data.GetFormats();
                //Make sure there is a format there

                if (allFormats.Length == 0)
                    return;

                string ItemType = allFormats[0];
                Object instance = (Object)Assembly.GetExecutingAssembly().CreateInstance(ItemType);

                //If the format doesn't exist do nothing

                if (instance == null)
                    return;

                instance.name = Object.name;
                
                //Add the element to the canvas
                CircuitCanvas.Children.Add(instance);

                //Get the point of the mouse relative to the canvas
                Point p = e.GetPosition(CircuitCanvas);
                center.X = p.X - instance.Width / 2;
                center.Y = p.Y - instance.Height / 2;
                //Take 15 from the mouse position to center the element on the mouse
                Canvas.SetLeft(instance, center.X);
                Canvas.SetTop(instance, center.Y);
                
                
                _attachedInputLines = MovingElement.GetInputLine();


                Object obj = instance;
                //center = new Point(targetPoints.X - obj.ActualWidth / 2, targetPoints.Y - obj.ActualHeight / 2);
                foreach (LineGeometry attachedLine in _attachedInputLines)
                {
                    attachedLine.EndPoint = MoveLine(attachedLine.EndPoint,
                                                    (Math.Abs(center.X + instance.Width / 2) + _anchorPoint.X),
                                                    (Math.Abs(center.Y + instance.Height / 2)  + _anchorPoint.Y));
                    instance.AttachInputLine(attachedLine);

                }

                _attachedOutputLines = MovingElement.GetOutputLine();
                //Transform the attached line if its an output (uses StartPoint)
                foreach (LineGeometry attachedLine in _attachedOutputLines)
                {
                    attachedLine.StartPoint = MoveLine(attachedLine.StartPoint,
                                                     (Math.Abs(center.X + instance.Width / 2) + _anchorPoint.X),
                                                    (Math.Abs(center.Y + instance.Height / 2) + _anchorPoint.Y));
                    instance.AttachOutputLine(attachedLine);
                }
                
                CircuitCanvas.Children.Remove(MovingElement);
            }



            if (inDrag)
            {

                var mousePos = e.GetPosition(CircuitCanvas);
                double left = mousePos.X - (MovingElement.ActualWidth/ 2);
                double top = mousePos.Y - (MovingElement.ActualHeight / 2);
                Canvas.SetLeft(MovingElement, left);
                Canvas.SetTop(MovingElement, top);
                p2 = CircuitCanvas.TranslatePoint(new Point(0, 0), MovingElement);
                _attachedInputLines = MovingElement.GetInputLine();
                var mouse = e.GetPosition(MovingElement);
                center.X = mousePos.X - mouse.X;
                center.Y = mousePos.Y - mouse.Y;
                //center = new Point(targetPoints.X - obj.ActualWidth / 2, targetPoints.Y - obj.ActualHeight / 2);
                foreach (LineGeometry attachedLine in _attachedInputLines)
                {
                    attachedLine.EndPoint = MoveLine(attachedLine.EndPoint,
                                                    (center.X + MovingElement.Width / 2 + _anchorPoint.X),
                                                  (center.Y + MovingElement.Height / 2 + _anchorPoint.Y));

                }

                _attachedOutputLines = MovingElement.GetOutputLine();
                //Transform the attached line if its an output (uses StartPoint)
                foreach (LineGeometry attachedLine in _attachedOutputLines)
                {
                    attachedLine.StartPoint = MoveLine(attachedLine.StartPoint,
                                                     (Math.Abs(center.X + MovingElement.Width / 2) + _anchorPoint.X),
                                                    (Math.Abs(center.Y + MovingElement.Height / 2) + _anchorPoint.Y));
                }
                _anchorPoint = mousePos;
                _anchorPoint.X = p2.X - MovingElement.Width / 2;
                _anchorPoint.Y = p2.Y - MovingElement.Height / 2;
            }